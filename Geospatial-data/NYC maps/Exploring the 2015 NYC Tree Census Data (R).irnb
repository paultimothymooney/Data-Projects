{
  "cells": [
    {
      "metadata": {
        "_uuid": "9529f97bc728fab7507c44d9a795b7b4ce8dee34",
        "_cell_guid": "c097be9d-c10d-40ae-a45b-afbb1a0b455b",
        "trusted": true,
        "_kg_hide-input": true,
        "_kg_hide-output": true
      },
      "cell_type": "code",
      "source": "library(tidyverse)\nlibrary(sp)\nlibrary(rgdal) \nc15 = read.csv(\"../input/ny-2015-street-tree-census-tree-data/2015-street-tree-census-tree-data.csv\", na.strings = c(\"\", \"None\", 999999))\ncounties = readOGR(\"../input/nyc-borough-boundaries/nybb.shp\", layer=\"nybb\")\nspecies=c15\ncoordinates(c15) = ~longitude+latitude\n# Lazy - tell R manually what system we want\nproj4string(c15)<-CRS(\"+proj=longlat +datum=NAD83\")\n# Use the projection from the counties shape file and project the tree data this way too. Include the coord ref system from the shape file.\ntree15 = spTransform(c15, CRS(proj4string(counties)))\n# ggplots fave food is data.frame\ntree15 = data.frame(tree15)\n# I want to plot the locations of just the top 5 species in Manhattan\nman15 = filter(tree15, borough == \"Manhattan\")\n#head(sort(table(man15$spc_common), decreasing = TRUE), n=25)",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "ca80a7bc21111d15a0426390bff2fe0c5a6e06bc",
        "_cell_guid": "433ba831-1c07-41a1-900b-796c11fdd04b",
        "trusted": true,
        "scrolled": false
      },
      "cell_type": "code",
      "source": "man15.10 = filter(man15, spc_common %in% names(head(sort(table(man15$spc_common), decreasing = TRUE), n=5)))\nbarplot(head(sort(table(man15$spc_common), decreasing = TRUE)/dim(man15)[1]*100, n =5),\n     main = \"Top 5 species in Manhattan, 2015\",\n     xlab = \"Percentage\",\n     col = \"darkorange3\",\n     las = 1,\n     horiz = F\n    )",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "_uuid": "6fec9b91bb7f2320cac5f3a007f4362ae9395f64",
        "_cell_guid": "76f9a0f3-d225-4140-944d-59f448c9f056",
        "trusted": true
      },
      "cell_type": "code",
      "source": "# Create a nice looking map\nggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Trees of Manhattan - Locations of the top 5 species\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10, alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "e0adeaa7608bf078ee40864d835ae6f49cf4287c"
      },
      "cell_type": "code",
      "source": "ggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Honeylocust\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10[which(man15.10$spc_common==\"honeylocust\"),], alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "4ffa20ff0c96beb97c4bfd1bb2f35846fdfae83f"
      },
      "cell_type": "code",
      "source": "ggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Callery pear\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10[which(man15.10$spc_common==\"Callery pear\"),], alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "a51b729bd8f89eaaef3a3a614cf9a9df670c9b8b"
      },
      "cell_type": "code",
      "source": "ggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Ginkgo\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10[which(man15.10$spc_common==\"ginkgo\"),], alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "8a7c8db34d4f967800c67ee0dc8f0221f6053567"
      },
      "cell_type": "code",
      "source": "ggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Pin Oak\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10[which(man15.10$spc_common==\"pin oak\"),], alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    },
    {
      "metadata": {
        "trusted": true,
        "_uuid": "afb999c7bca46c63ed92810a51fb097d291e4454"
      },
      "cell_type": "code",
      "source": "ggplot() +  \n    geom_polygon(data=counties[which(counties$BoroCode==1),], aes(x=long, y=lat, group=group), fill=\"grey40\", \n        colour=\"grey90\", alpha=1)+\n    labs(x=\"\", y=\"\", title=\"Sophora\")+ #labels\n    theme(axis.ticks.y = element_blank(),axis.text.y = element_blank(), # get rid of x ticks/text\n          axis.ticks.x = element_blank(),axis.text.x = element_blank(), # get rid of y ticks/text\n          plot.title = element_text(lineheight=.8, face=\"bold\", vjust=1))+ # make title bold and add space\n    geom_point(aes(x=longitude, y=latitude, color=factor(spc_common)), data=man15.10[which(man15.10$spc_common==\"Sophora\"),], alpha=0.5, size=0.3)+ \n    coord_equal(ratio=1) # square plot to avoid the distortion",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "language_info": {
      "mimetype": "text/x-r-source",
      "name": "R",
      "pygments_lexer": "r",
      "version": "3.4.2",
      "file_extension": ".r",
      "codemirror_mode": "r"
    },
    "kernelspec": {
      "display_name": "R",
      "language": "R",
      "name": "ir"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 1
}